/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Proj01 from '../model/Proj01';

/**
* Proj01 service.
* @module api/Proj01Api
* @version 1.0.0
*/
export default class Proj01Api {

    /**
    * Constructs a new Proj01Api. 
    * @alias module:api/Proj01Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createproj01 operation.
     * @callback module:api/Proj01Api~createproj01Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Proj01} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Proj01} proj01 data to be created
     * @param {module:api/Proj01Api~createproj01Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proj01}
     */
    createproj01(proj01, callback) {
      let postBody = proj01;
      // verify the required parameter 'proj01' is set
      if (proj01 === undefined || proj01 === null) {
        throw new Error("Missing the required parameter 'proj01' when calling createproj01");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proj01;
      return this.apiClient.callApi(
        '/proj01', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteproj01 operation.
     * @callback module:api/Proj01Api~deleteproj01Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} proj01Id the Id parameter
     * @param {module:api/Proj01Api~deleteproj01Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteproj01(proj01Id, callback) {
      let postBody = null;
      // verify the required parameter 'proj01Id' is set
      if (proj01Id === undefined || proj01Id === null) {
        throw new Error("Missing the required parameter 'proj01Id' when calling deleteproj01");
      }

      let pathParams = {
        'proj01Id': proj01Id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/proj01/{proj01Id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllproj01 operation.
     * @callback module:api/Proj01Api~getAllproj01Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Proj01>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/Proj01Api~getAllproj01Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Proj01>}
     */
    getAllproj01(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Proj01];
      return this.apiClient.callApi(
        '/proj01/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getproj01 operation.
     * @callback module:api/Proj01Api~getproj01Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Proj01} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} proj01Id the Id parameter
     * @param {module:api/Proj01Api~getproj01Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proj01}
     */
    getproj01(proj01Id, callback) {
      let postBody = null;
      // verify the required parameter 'proj01Id' is set
      if (proj01Id === undefined || proj01Id === null) {
        throw new Error("Missing the required parameter 'proj01Id' when calling getproj01");
      }

      let pathParams = {
        'proj01Id': proj01Id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Proj01;
      return this.apiClient.callApi(
        '/proj01/{proj01Id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateproj01 operation.
     * @callback module:api/Proj01Api~updateproj01Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Proj01} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} proj01Id the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Proj01} opts.proj01 data to be updated
     * @param {module:api/Proj01Api~updateproj01Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Proj01}
     */
    updateproj01(proj01Id, opts, callback) {
      opts = opts || {};
      let postBody = opts['proj01'];
      // verify the required parameter 'proj01Id' is set
      if (proj01Id === undefined || proj01Id === null) {
        throw new Error("Missing the required parameter 'proj01Id' when calling updateproj01");
      }

      let pathParams = {
        'proj01Id': proj01Id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Proj01;
      return this.apiClient.callApi(
        '/proj01/{proj01Id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
